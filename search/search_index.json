{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MacroChip","text":"","tags":["tag1","tag2"]},{"location":"#smart-weather-station-team-306","title":"Smart Weather Station - Team 306","text":"","tags":["tag1","tag2"]},{"location":"#team-members","title":"Team Members","text":"<p>Aarshon George - HMI Interface Alex Comeaux - Solar Actuator Ian Anderson - Sensor Suite Kushagra Dashora - Internet Communication</p>","tags":["tag1","tag2"]},{"location":"#report","title":"Report","text":"<p>Team Charter Ideation &amp; Concept Generation Block &amp; Process Diagrams Appendix</p>","tags":["tag1","tag2"]},{"location":"#asu","title":"ASU","text":"EGR 314 Spring 2025 Dr. Kevin Nichols 1/16/2025-5/2/2025 <p>\ud83c\udf24\ufe0f Live Weather Dashboard</p>","tags":["tag1","tag2"]},{"location":"appendix/","title":"Appendix - appendix","text":""},{"location":"appendix/#charts","title":"Charts","text":""},{"location":"appendix/#tables","title":"Tables","text":""},{"location":"appendix/#graphs","title":"Graphs","text":""},{"location":"appendix/#other-images","title":"Other Images","text":""},{"location":"block/","title":"Block Diagram, Process Diagram, & Message Structure","text":""},{"location":"block/#block-diagram","title":"Block Diagram","text":"<p>The station is comprised of four subsystems which are each assigned to a group member. These subsystems are connected through a UART daisy chain that functions as a continuous loop for messages. This daisy chain is also used to transfer power, ground, and other signals between neighboring subsystems.</p> <p></p> <p>Daisy Chain Header Pin Assignment </p> <ol> <li>External Power (+9-12V)</li> <li>UART Transmit Line (TX/RX)</li> <li>UART Ready to Send (inactive)</li> <li>UART Clear to Send (inactive)</li> <li>Subsystem Specific/No Connection</li> <li>Subsystem Specific/No Connection</li> <li>Subsystem Specific/No Connection</li> <li>External Ground</li> </ol>"},{"location":"block/#process-diagram","title":"Process Diagram","text":"<p>All critical information is sent through UART and must follow the protocol below. Messages that are sent to everyone in the chain are trashed by the sender. Messages with a designated recipient are trashed by the recipient. Messages may be single commands or continuous loops. Relevant message data is differentiated by utilizing the recipient ID and message type bytes. Certain message types are relevant to all subsystems. Messages that don't pertain to the subsystem are passed along down the chain.</p> <pre><code>sequenceDiagram\n    actor u as User\n    participant a as Aarshon\n    participant i as Ian\n    participant c as Alex\n    participant k as Kushagra\n    actor w as Web\n    w--&gt;&gt;k: Alignment frequency\n    k-&gt;&gt;a: Kushagra to Alex&lt;br&gt;Set alignment frequency to 5min\n    a-&gt;&gt;i: Kushagra to Alex&lt;br&gt;Set alignment frequency to 5min\n    i-&gt;&gt;c: Kushagra to Alex&lt;br&gt;Set alignment frequency to 5min\n    c-&gt;&gt;c: Set wait period&lt;br&gt;trash msg\n    u--&gt;&gt;a: Shift base rotation\n    a-&gt;&gt;i: Aarshon to Alex&lt;br&gt;Shift 10 deg clockwise\n    i-&gt;&gt;c: Aarshon to Alex&lt;br&gt;Shift 10 deg clockwise\n    c-&gt;&gt;c: Rotate base 10deg clockwise&lt;br&gt;trash msg\n    loop [every second]\n        i-&gt;&gt;c: Ian to Alex&lt;br&gt;Solar panel alignment\n        c-&gt;&gt;c: Moves solar panel&lt;br&gt;trash msg\n    end\n    loop [every second]\n        i-&gt;&gt;c: Ian to Everyone&lt;br&gt;Temp is 70F &amp; Humidity is 30%\n        c-&gt;&gt;k: Ian to Everyone&lt;br&gt;Temp is 70F &amp; Humidity is 30%\n        k--&gt;&gt;w: Temp is 70F &amp; Humidity is 30%\n        k-&gt;&gt;a: Ian to Everyone&lt;br&gt;Temp is 70F &amp; Humidity is 30%\n        a--&gt;&gt;u: Display data\n        a-&gt;&gt;i: Ian to Everyone&lt;br&gt;Temp is 70F &amp; Humidity is 30%\n        i-&gt;&gt;i: trash msg\n    end</code></pre>"},{"location":"block/#message-structure","title":"Message Structure","text":"<p>All important communication between subsystems is done over the UART daisy chain. UART messages all follow the same message structure which uses up to 64 bytes. This structure is started by two start bytes, followed by the sender ID byte and the recipient ID byte. The message information is held in the following bytes and can be up to 58 bytes in length. The message is terminated with two stop bytes. If any of the 4 prefix bytes are corrupted, the message is rejected. Messages are terminated after 64 bytes to stop an open loop upon failure to receive either of the two stop bytes.</p> 0 1 2 3 4 - 61 62 63 <code>0x41</code> <code>0x5A</code> Send ID Receive ID Message <code>0x59</code> <code>0x42</code> Team Member Subsystem ID Broadcast <code>0x58 'X'</code> Aarshon George <code>0x61 'a'</code> Alex Comeaux <code>0x63 'c'</code> Ian Anderson <code>0x69 'i'</code> Kushagra Dashora <code>0x6B 'k'</code> <p>The following defines the various messages and their structures to be sent within the UART message protocol. The first message byte is used to identify the type of message, and the following 57 bytes contain the data.</p> Message typebyte[5](<code>char</code>) Description 1 print sensor X data Y 2 move motor X param Y 3 set period X 4 subsystem status code X 5 subsystem Z error msg 6 print local weather X data Y <p>Message Type 1: Sensor Data Transmission Message type for sending measured wind speed, temperature, humidity, and air pressure to all other subsystems.</p> byte 1 byte 2 byte 3-4 <code>0x31</code> X(<code>uint8_t</code>) Y(<code>uint16_t</code>) ~ sensor number data value Number Code Sensor '1' <code>0x01</code> wind speed '2' <code>0x02</code> temperature '3' <code>0x03</code> humidity '4' <code>0x04</code> atm pressure Sender Destination Ian <code>'i'</code> broadcast <code>'X'</code> <p>Message Type 2: Shift Motor Message type for sending a command to rotate base stepper \"Y\" degrees.</p> byte 1 byte 2 byte 3 <code>0x32</code> X(<code>uint8_t</code>) Y(<code>uint8_t</code>) ~ motor # theta Senders Destination Aarshon <code>'a'</code>Kushagra <code>'k'</code> Alex <code>'c'</code> <p>Message Type 3: Alignment frequency Message type for sending a command to set the panel alignment frequency \"X\" number of seconds.</p> byte 1 byte 2-3 <code>0x33</code> X(<code>uint16_t</code>) ~ time(sec) Senders Destination Aarshon <code>'a'</code>Kushagra <code>'k'</code> Alex <code>'c'</code> <p>Message Type 4: Subsystem Status Code Message type for sending status code of a subsystem to be displayed. Sender ID is used to determine affected subsystem.</p> byte 1 byte 2 <code>0x34</code> X(<code>uint8_t</code>) ~ error code code number meaning '1' <code>0x01</code> full funtionality '2' <code>0x02</code> partial funtionality '3' <code>0x03</code> no funtionality Senders Destination Alex <code>'c'</code>Ian <code>'i'</code>Kushagra <code>'k'</code> Aarshon <code>'a'</code> <p>Message Type 5: Subsystem Error Message Message type for sending string about subsystem error. Sender ID is used to determine affected subsystem.</p> byte 1 byte 2-58 <code>0x35</code> Error Message char(<code>uint8_t</code>) Senders Destination Alex <code>'c'</code>Ian <code>'i'</code>Kushagra <code>'k'</code> Aarshon <code>'a'</code> <p>Message Type 6: Local Weather Data Message type for sending received local weather data for HMI display</p> Byte 1 Byte 2 Byte 3-4 <code>0x36</code> X(<code>uint8_t</code>) Y(<code>uint16_t</code>) ~ data type data value Number Code Data '1' <code>0x01</code> wind speed '2' <code>0x02</code> temperature '3' <code>0x03</code> humidity '4' <code>0x04</code> atm pressure Sender Destination Kushagra <code>'k'</code> Aarshon <code>'a'</code>"},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"ideation/","title":"Ideation & Design Generation - ideation","text":""},{"location":"ideation/#goal-of-the-exhibit","title":"Goal of the Exhibit","text":"<p>The Smart STEM Weather Station exhibit's main objective is to create an entertaining and instructive experience that encourages curiosity and an awareness of environmental science. The exhibit was created with accessibility and engagement to make difficult scientific ideas understandable to a wide range of viewers. Visitors are urged to actively investigate weather patterns and environmental elements by integrating real-time data collecting with an easy-to-use interface, transforming abstract data into concrete, significant discoveries. An LCD display, tactile buttons, and sensor demonstrations are examples of hands-on features that guarantee visitors will not only view the exhibit but also engage with it and gain knowledge from it. This adheres to the \"Suggested Guidelines for Designing Interactive Exhibits\" by emphasizing clarity, simplicity, and an active learning strategy to maintain visitor interest and enhance educational outcomes.</p>"},{"location":"ideation/#target-audience","title":"Target Audience","text":"<p>The exhibit is designed to appeal to a wide range of visitors, including those of all ages, but it focuses especially on K\u201312 pupils. Its user-friendly design will appeal to younger audiences since it incorporates visual signals like LED indicators, big buttons, and guided directions to make navigation and data interpretation easier. Deeper levels of exploration, such as comprehending how sensors gather data and identifying patterns in environmental changes, are available for older kids and adults in the exhibit. The Smart STEM Weather Station guarantees inclusivity and accessibility by accommodating a variety of learning styles and educational levels. Following the \"Suggested Guidelines for Designing Interactive Exhibits,\" the display also strongly emphasizes making an experience that is cozy, captivating, and long-lasting to draw in visitors, pique their interest, and enable them to learn in a meaningful way.</p>"},{"location":"ideation/#concept-design-generation","title":"Concept &amp; Design Generation","text":""},{"location":"ideation/#ideation","title":"Ideation","text":"<p>We met together to discuss possible ideas and design criteria. Every idea was accepted to broaden our options. Each idea was given its own note and was place on the below board. </p>"},{"location":"ideation/#sorting-grouping-ideas","title":"Sorting &amp; Grouping Ideas","text":"<p>These ideas were then organized into three main categories. The first catagory, depicted in green, is all of the various exhibit ideas that we produced. The magenta notes are critical features or criteria that need to be achieved. The other features shown in blue are not necessary to the final exhibit but could be interesting additions if possible. These groups were then further organized by similarity into columns. We then combined various subgroups to arrive at our concept.  </p>"},{"location":"ideation/#our-concept","title":"Our Concept","text":""},{"location":"ideation/#concept-description","title":"Concept Description","text":"<p>The Smart STEM Weather Station is designed to captivate and educate museum visitors by providing real-time environmental data through an interactive interface. This design prioritizes accessibility and engagement, addressing visitor needs with features that make learning both hands-on and straightforward. For example, the station's LCD screen and physical buttons create an easy-to-navigate system suitable for all ages. Additional features like color-coded LED indicators and user-friendly alerts simplify the interpretation of complex data. The station will also include instructional elements such as on-screen prompts, and demonstrations illustrating how the sensors work to collect data.</p>"},{"location":"ideation/#planned-workflow","title":"Planned Workflow","text":"<p>The functionality of the weather station is divided among four team members, each contributing to an individual subsystem. One teammate will handle internet-based two-way communication using the ESP32 microcontroller, enabling data retrieval and updates from an API that stores local weather data. Another will design the human-machine interface (HMI), developing the interactive LCD display and control buttons for navigating the data and controlling the system. The third teammate will focus on the sensor subsystem, integrating temperature, humidity, ultraviolet, air pressure, air quality, and wind speed sensors to collect real-time environmental data for the purposes of demonstration. The fourth member will manage the actuator-based response, implementing a solar array that tracks sunlight using the acquired weather data.</p> <p>To ensure ease of use, the weather station uses visual cues, such as LED status indicators, and a simplified graphical interface on a 16x2 LCD screen. Guided by the \"Suggested Guidelines for Designing Interactive Exhibits,\" the controls are ergonomically designed with large, easy-to-use buttons and an interface that avoids complexity. Durability, safety, and comfort are central to the design\u2014each subsystem is weatherproofed, with sturdy enclosures to withstand environmental challenges like rain, wind, and mild debris. Safety features include automatic shutoff and several fuses to prevent overheating and protect against power surges.</p>"},{"location":"ideation/#concept-presentation","title":"Concept Presentation","text":""},{"location":"report/","title":"Team Charter - charter","text":""},{"location":"report/#team-statements","title":"Team Statements","text":"<p>Charter Statement:  Our mission is to design and deliver innovative, sustainable, and modular embedded systems that address educational and STEM-based challenges. This semester, we aim to develop an interactive, web-enabled physical device demonstrating a scientific or engineering concept. The project will prioritize modularity, standards compliance, and user engagement to support K-12 students' interest in STEM fields. Success will be measured by the device's interactivity, educational impact, technical robustness, and adherence to modular design principles.</p> <p>Mission Statement:  Our goal is to develop an interactive, STEM-themed educational display within four months that engages K-12 students by showcasing a scientific or engineering concept in a fun and Intuitive way. The product will emphasize energy efficiency, modularity, and user-friendly design, ensuring both technical excellence and alignment with educational standards. We aim to deliver a sustainable, impactful solution that inspires young learners to explore science, technology, engineering, and mathematics while fostering our team's growth in professional engineering practices.</p>"},{"location":"report/#team-goals","title":"Team Goals","text":"<ol> <li> <p>Develop a Polished, Market-Ready Product Create an innovative, STEM-themed, interactive device that's not only functional but also visually impressive and ready for real-world use. The goal is to deliver a high-quality product that investors and end-users alike will recognize as impactful and valuable.</p> </li> <li> <p>Emphasize Professional Collaboration Operate as a professional team by leveraging everyone's expertise, maintaining clear communication, and working efficiently to meet deadlines. Showcase our ability to collaborate on a complex project and deliver results as a cohesive unit.</p> </li> <li> <p>Prioritize Standards and Scalability Build the product with scalability in mind by adhering to industry standards and modular design principles. This ensures the device is easy to maintain, upgrade, and adapt for broader markets, making it appealing for future development and commercialization.</p> </li> <li> <p>Showcase Advanced Technical Skills Demonstrate our technical expertise in robotics, embedded systems, and software engineering through a well-executed, innovative project. Highlight cutting-edge solutions to real-world challenges, proving we're ready for the next step in our careers.</p> </li> <li> <p>Focus on End-User Impact Deliver a product that's intuitive, engaging, and tailored to the needs of the target audience\u2014K-12 students and educators. Make it a standout experience that inspires excitement for STEM while solving specific user pain points.</p> </li> <li> <p>Highlight Sustainability and Innovation Incorporate energy-efficient designs, sustainable materials, and forward-thinking features that make the product not only innovative but also environmentally responsible. Investors want to see a future-focused mindset.</p> </li> <li> <p>Deliver On Time and On Budget Meet all milestones, stay within budget, and present a fully functional prototype or final product. Show investors that we're capable of managing resources effectively and delivering a tangible result within a defined time frame.</p> </li> </ol>"},{"location":"report/#communication-channels","title":"Communication Channels","text":"Name 1st Choice 2nd Choice 3rd Choice Aarshon George Text Discord Email Alex Comeaux Text Discord Email Ian Anderson Text Discord Email Kushagra Dashora Text Discord Slack <p>Our team will primarily use an iMessage group to facilitate team communication. This allows for immediate and direct communication between all group members at once for important notices and discussions.</p> <p>If team members are unresponsive for excessive times during meetings, the team member may be called for additional reminders.</p>"},{"location":"report/#meeting-schedule","title":"Meeting Schedule","text":"Time Sunday Monday Tuesday Wednesday Thursday Friday Saturday 09:00 C I K I 10:00 A I K C I K A I 11:00 A I K C I K A I 12:00 A I K C I K A I 13:00 A I K I K I 14:00 A I K I I A K I 15:00 A I K I I I I A K I 16:00 A I K I I A C I I A K I 17:00 A I K C I I A C I A C I A C K C I 18:00 A I K C I I A C I A C I A C K C I 19:00 A I K C I I A C I A C I A C K A I 20:00 A I K I I A C I A C I A C K A I 21:00 A I K A C A C A C K A I Name Initial Email Phone Aarshon George A anolas97@asu.edu (480)876-1337 Alex Comeaux C amcomeau@asu.edu (602)527-7786 Ian Anderson I inanders@asu.edu (808)824-1519 Kushagra Dashora K kdashora@asu.edu (602)632-1229 <p>Communication Methods:</p> <ol> <li>Text</li> <li>Discord</li> <li>Email</li> </ol>"},{"location":"report/#meeting-coordination","title":"Meeting Coordination","text":"<p>Meetings will typically be held during Wednesday and Thursday afternoons, preferably in person and with all members present. If circumstances do not allow for a normal meeting time, a more suitable meeting time should be discussed and agreed upon. Meeting schedule will be kept in Google Calendar for reminders. For more spontaneous meetings, members may not be required to attend if personal reasons arise.</p>"},{"location":"report/#roles-responsibilities","title":"Roles &amp; Responsibilities","text":"Name Role Duties Kushagra Dashora Meeting Leader Schedules team meetings, creates and distributes an agenda for each meeting Alex Comeaux Meeting Recorder Takes minutes of each team meeting, including attendance, and records action items and to whom they are assigned Aarshon George Assignment Leader Coordinates the team's work on a given assignment to Canvas before the due date Ian Anderson Project Monitor Tracks the team's progress relative to the project schedule (Gantt Chart) and keeps team members apprised of deadlines and project status <p>Assigned roles are subject to change at any time</p>"},{"location":"report/#team-coordination-accountability","title":"Team Coordination &amp; Accountability","text":"<p>Each team member will volunteer for a role by articulating their qualifications and reasons for suitability. If two members express interest in the same role, they will engage in discussion and reach a compromise. We plan to rotate roles at least three times\u2014or as needed\u2014to ensure we maximize each individual's growth and learning opportunities. Roles are assigned based on each person's qualifications and skills, with regular check-ins to confirm that no one finds their responsibilities overwhelming. Technical tasks will be distributed in alignment with each member's strongest areas of confidence and expertise.</p> <p>To ensure all contributions are properly credited, each member will sign their name at the beginning of every assignment, just as they would for a standard homework task. Additionally, each change made to the team website is recorded through github, creating a clear record of individual responsibilities. This method allows us to see if anyone is under-performing and prompts that individual to seek help or clarification as needed. As long as everyone completes their assigned tasks, there should be no hesitation in requesting or offering assistance. Otherwise, if a team member repeatedly fails to complete the tasks assigned to them, the team will be forced to hold this team member accountable.</p>"},{"location":"report/#defined-roles-and-responsibilities","title":"Defined Roles and Responsibilities","text":"<p>Aarshon: Team lead and systems integrator, overseeing overall progress and ensuring the components come together seamlessly. Alex: Hardware specialist, responsible for designing, testing, and optimizing the physical and electronic components of the project. Ian: Software developer, handling coding, web integration, and system control logic for the interactive aspects. Kushagra: User experience designer and tester, focusing on user-centered design, interface development, and end-user feedback. Regular Team Check-Ins Weekly meetings led by Aarshon to discuss progress, address roadblocks, and review upcoming tasks. Each member provides a brief update on their responsibilities.</p> <p>Transparent Communication Use Slack for daily updates, Trello for task management, and Google Drive for shared documentation. This ensures everyone has access to key information and can collaborate effectively.</p> <p>Milestone Tracking The project will be broken into phases:</p> <p>Phase 1: Concept development (All team members) Phase 2: Hardware prototyping (Alex &amp; Aarshon) Phase 3: Software integration (Ian) Phase 4: User testing and refinement (Kushagra &amp; Alex) Peer Accountability Each team member is responsible for updating the group on their progress during meetings and flagging potential delays. If someone is falling behind, others will provide support.</p> <p>Conflict Resolution If a disagreement arises, Alex will act as a mediator to ensure the team remains focused on the project goals. Decisions will prioritize the project's success and deadlines.</p> <p>Feedback Loops Weekly peer reviews will allow team members to provide constructive feedback on each other's work. This ensures everyone stays aligned and that the final product meets high standards.</p> <p>Leadership and Decision-Making Aarshon will make executive decisions if consensus isn't reached. However, all decisions will be informed by group discussions to ensure fairness and inclusivity.</p> <p>Commitment to Deadlines Each milestone will have a hard deadline, tracked on Trello. Missed deadlines will require immediate discussion and a revised plan to stay on schedule.</p>"},{"location":"report/#conflict-recognition-resolution","title":"Conflict Recognition &amp; Resolution","text":"<p>Our team understands that disagreements will happen in group environments. As such, members are expected to be able to handle conflicts in a mature and civil way. Additional meetings may be arranged upon failure to complete responsibilities, and repeated behavior will be escalated to professors.</p> <p>If someone disagrees or there's tension, we'll address it right away instead of letting it simmer. Ignoring conflicts only makes them worse. We'll sit down, lay everything out on the table, and figure out where the disagreement is coming from.</p> <p>We get it\u2014everyone has different ideas, especially when you've got creative, motivated people working together. Disagreeing means we care about the project and want it to be great. The key is keeping it respectful and focusing on the idea, not the person.</p> <p>We'll make sure everyone knows what they're responsible for from the start. If someone's juggling too many tasks or stepping into other people's lanes, we'll talk it out and adjust things. It's all about balance and making sure no one feels overloaded or overlooked.</p> <p>If something goes wrong, we'll deal with it together: Step 1: Talk it out. Let everyone explain their side and listen. Step 2: Brainstorm solutions as a group. No bad ideas\u2014just throw them out there and see what works. Step 3: Agree on a plan, and make sure everyone's on board.</p> <p>When to Ask for Help If we're totally stuck, or the disagreement is starting to slow us down, we won't hesitate to bring it to the instructor. This is a last resort, but if it gets to that point, we'll explain the issue and ask for guidance to get us back on track. Keep It Chill and Professional</p> <p>At the end of the day, we're all here for the same reason: to deliver a great project and grow as engineers. We'll handle conflicts in a way that's respectful, keeps the vibe positive, and moves us forward as a team.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}