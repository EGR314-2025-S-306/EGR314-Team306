{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MacroChip","text":"","tags":["tag1","tag2"]},{"location":"#macrochip-stem-weather-station-team-306","title":"MacroChip STEM Weather Station \u2013 Team 306","text":"","tags":["tag1","tag2"]},{"location":"#live-weather-dashboard-click-here","title":"\ud83c\udf24\ufe0f Live Weather Dashboard - Click Here!","text":"","tags":["tag1","tag2"]},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Team Charter </li> <li>Ideation &amp; Concept Generation </li> <li>Block &amp; Process Diagrams </li> <li>API Message Structure </li> <li>Innovation Showcase Poster </li> <li>Resources </li> <li>Reflection &amp; Improvements</li> </ul>","tags":["tag1","tag2"]},{"location":"#home","title":"Home","text":"<p>Project Summary: </p> <p>The MacroChip team\u2019s Smart STEM Weather Station is an interactive, web-enabled weather monitoring system designed to engage K-12 students in hands-on learning. This exhibit collects real-time environmental data (such as temperature, humidity, wind speed, and air pressure) and displays it on an intuitive Human-Machine Interface (HMI). A solar panel on the station actively tracks sunlight to demonstrate renewable energy principles, while an onboard Wi-Fi module publishes the weather data to an online dashboard for remote viewing. The device emphasizes accessibility, modular design, and educational value, allowing visitors to navigate through different weather metrics using a simple keypad and to see live data both on the local display and via the internet By combining sensor technology, interactive controls, and cloud connectivity, the MacroChip Weather Station transforms abstract environmental science concepts into tangible, engaging experiences for learners of all ages.  </p> <p></p>","tags":["tag1","tag2"]},{"location":"#team-members-and-roles","title":"Team Members and Roles","text":"<p>Aarshon George \u2013 HMI Interface Lead Developed the user interface (keypad and OLED display) and integrated system controls Alex Comeaux \u2013 Solar Actuator Engineer Designed the motor control subsystem for solar panel tracking. Ian Anderson \u2013 Sensor Suite Developer Implemented environmental sensors and data acquisition. Kushagra Dashora \u2013 Internet Communication Specialist Established Wi-Fi/MQTT connectivity and web dashboard integration.</p>","tags":["tag1","tag2"]},{"location":"#team-organization-charter","title":"Team Organization &amp; Charter","text":"","tags":["tag1","tag2"]},{"location":"#mission-statement","title":"Mission Statement","text":"<p>Our mission: Design and deliver an interactive, STEM-themed educational weather station that inspires K-12 students to explore science and engineering. We aim to showcase real-time weather data through an intuitive HMI, emphasizing energy efficiency, modularity, and ease of use, while aligning with educational standards. This project will engage young learners by making environmental science tangible and fun, turning complex concepts into an accessible hands-on exhibit.</p>","tags":["tag1","tag2"]},{"location":"#team-charter-values","title":"Team Charter &amp; Values","text":"<p>Our team operates on core principles of collaboration, innovation, professionalism, and educational impact. Each member is accountable for their subsystem while supporting seamless integration across the project. We prioritize creative problem-solving and adhere to engineering best practices, ensuring the design is well-documented and robust. As a team, we commit to:</p> <ul> <li> <p>Effective Collaboration: Maintain open communication, assist each other, and integrate our subsystems into a cohesive product.</p> </li> <li> <p>Modular Design: Build the system in interchangeable modules (sensing, actuation, interface, connectivity) to enhance scalability and maintainability.</p> </li> <li> <p>Quality and Sustainability: Use industry standards and reliable components to create a durable exhibit that can run safely for extended periods.</p> </li> <li> <p>Educational Focus: Keep the end-user (students and visitors) in mind, providing an intuitive, engaging experience that aligns with classroom learning objectives.</p> </li> <li> <p>Accountability: Meet project deadlines, stay within budget, and document progress. Each member takes ownership of their part while understanding the overall system.</p> </li> </ul>","tags":["tag1","tag2"]},{"location":"#team-websites","title":"Team Websites","text":"<p>Aarshon George - HMI Interface Alex Comeaux - Solar Actuator Ian Anderson - Sensor Suite Kushagra Dashora - Internet Communication</p>","tags":["tag1","tag2"]},{"location":"#asu-logo-here","title":"***ASU Logo here","text":"EGR 314 Spring 2025 Dr. Kevin Nichols 1/16/2025-5/2/2025 <p>\ud83c\udf24\ufe0f Live Weather Dashboard</p> <p>(For contact information, the team can be reached via the faculty advisor or through the project\u2019s GitHub repository issues. Individual contact details are available on each member\u2019s page if needed.)</p>","tags":["tag1","tag2"]},{"location":"api/","title":"Message Structure & API","text":""},{"location":"api/#api-message-structure","title":"API: Message Structure","text":"<p>All important communication between subsystems is done over the UART daisy chain. UART messages all follow the same message structure which uses up to 64 bytes. This structure is started by two start bytes, followed by the sender ID byte and the recipient ID byte. The message information is held in the following bytes and can be up to 58 bytes in length. The message is terminated with two stop bytes. If any of the 4 prefix bytes are corrupted, the message is rejected. Messages are terminated after 64 bytes to stop an open loop upon failure to receive either of the two stop bytes.</p> 0 1 2 3 4 - 61 62 63 <code>0x41</code> <code>0x5A</code> Send ID Receive ID Message <code>0x59</code> <code>0x42</code> Team Member Subsystem ID Broadcast <code>0x58 'X'</code> Aarshon George <code>0x61 'a'</code> Alex Comeaux <code>0x63 'c'</code> Ian Anderson <code>0x69 'i'</code> Kushagra Dashora <code>0x6B 'k'</code> <p>The following defines the various messages and their structures to be sent within the UART message protocol. The first message byte is used to identify the type of message, and the following 57 bytes contain the data.</p> Message typebyte[5](<code>char</code>) Description IanRole: Sensor<code>'i'</code> AlexRole: Actuator<code>'c'</code> KDRole: MQTT Server<code>'k'</code> AarshonRole: HMI<code>'a'</code> 1 print sensor X data Y Send ~ Receive Receive 2 move motor X param Y ~ Receive Send Send 3 subsystem status code X Send Send Receive Send 4 subsystem Z error msg Send Send Receive Send <p>Message Type 1: Sensor Data Transmission Message type for sending measured wind speed, temperature, humidity, and air pressure to all other subsystems.</p> byte 1 byte 2 byte 3-4big endian <code>0x31</code> X(<code>uint8_t</code>) Y(<code>uint16_t</code>) ~ sensor number data value Number Code Sensor '1' <code>0x01</code> wind speed '2' <code>0x02</code> temperature '3' <code>0x03</code> humidity '4' <code>0x04</code> atm pressure Sender Destination Ian <code>'i'</code> broadcast <code>'X'</code> <p>Message Type 2: Shift Motor Message type for sending a command to rotate base stepper \"Y\" degrees.</p> byte 1 byte 2 byte 3 <code>0x32</code> X(<code>uint8_t</code>) Y(<code>uint8_t</code>) ~ direction0x01 = clockwise0x02 = counterclockwise degree shift Senders Destination Aarshon <code>'a'</code>Kushagra <code>'k'</code> Alex <code>'c'</code> <p>Message Type 3: Subsystem Status Code Message type for sending status code of a subsystem to be displayed. Sender ID is used to determine affected subsystem.</p> byte 1 byte 2 <code>0x33</code> X(<code>uint8_t</code>) ~ error code code number meaning '1' <code>0x01</code> full funtionality '2' <code>0x02</code> partial funtionality '3' <code>0x03</code> no funtionality Senders Destination Alex <code>'c'</code>Ian <code>'i'</code>Kushagra <code>'k'</code> Aarshon <code>'a'</code> <p>Message Type 4: Subsystem Error Message Message type for sending string about subsystem error. Sender ID is used to determine affected subsystem.</p> byte 1 byte 2-58 <code>0x34</code> Error Message char(<code>uint8_t</code>) Senders Destination Alex <code>'c'</code>Ian <code>'i'</code>Kushagra <code>'k'</code> Aarshon <code>'a'</code> <p>Start Bytes: Two specific start bytes (0x41 \u201cA\u201d and 0x5A \u201cZ\u201d) mark the beginning of a message frame.These were chosen as an easy-to-remember signature (\"AZ\") that also serves as a simple error check \u2013 if a node does not see \"AZ\" at the start where expected, it knows a message is misaligned or corrupted and will reset its parser (preventing false triggers).</p> <p>Sender and Receiver IDs: Each subsystem has a unique ID embedded in the message so that nodes can identify messages. We used both character IDs and matching hex codes for clarity. For example, 'i' (0x69) represents the Sensor (Ian), 'c' (0x63) the Actuator (Alex), 'a' (0x61) the HMI (Aarshon), and 'k' (0x6B) the Wi-Fi/Cloud module (Kushagra). A special ID 'X' (0x58) is reserved for broadcast messages intended for all nodes. In each message, the third byte is the sender\u2019s ID and the fourth byte is the intended recipient\u2019s ID (or 'X' if broadcast). This addressing scheme was a design decision to make routing simple \u2013 every board can quickly check the Receiver ID byte against itself (or 'X') to know if it should process or forward the message.</p> <p>(The message type design was informed by the need to support both binary data and human-readable info. We considered using purely binary codes for everything to save space, but given our 64-byte frame, we had room to include some ASCII for convenience. The compromise was to use numeric/char codes for known small values and plain text for longer messages only when necessary. This has worked well in practice, as it\u2019s easy to tell message purpose at a glance in a debug log.)</p> <p>Data Payload: Depending on the message type, the data section can range from 0 bytes (for a simple ping or acknowledgment) up to 58 bytes. Most of our messages are short (sensor readings fit in 2 bytes, status codes in 1 byte, small commands in a few bytes). We set an upper limit of 64 bytes total for a message frame, which is a reasonable size for our needs and prevents any runaway transmissions from blocking the bus. If a message\u2019s end bytes are not received (due to interference or a reset), the protocol dictates that once 64 bytes total are read, the message is terminated anyway. This failsafe ensures that a missing terminator doesn\u2019t lock the system waiting indefinitely.</p> <p>End Bytes: We use two specific end-of-message bytes (0x59 \u201cY\u201d and 0x42 \u201cB\u201d) to mark the conclusion of a message frame. Thus every message effectively is wrapped by \u201cAZ\u201d at the start and \u201cYB\u201d at the end. These end bytes were also chosen to be distinct from common data values to reduce the chance of accidental occurrence. When a node sees \u201cYB\u201d, it knows the message is complete and can be processed (if addressed to it) or passed on. If a node doesn\u2019t see \u201cYB\u201d where expected by the length, as mentioned, it will drop the message after 64 bytes to avoid lock-up.</p>"},{"location":"block/","title":"Block Diagram & Process Diagram","text":""},{"location":"block/#block-diagram","title":"Block Diagram","text":"<p>The station is comprised of four subsystems which are each assigned to a group member. These subsystems are connected through a UART daisy chain that functions as a continuous loop for messages. This daisy chain is also used to transfer power, ground, and other signals between neighboring subsystems.</p> <p></p> <p>The MacroChip Weather Station is organized into four interconnected subsystems, each handled by a different team member: the HMI Module, Sensor Suite, Solar Actuator, and Internet Communication module. These subsystems are linked in a daisy-chain bus topology.</p> <p>Physically, each custom PCB has an upstream and downstream 8-pin header that passes power and communication signals to the next board in line.</p> <p>The chain is powered from a single external supply (9V DC input), which is regulated on each board to the required voltage (5V or 3.3V depending on components). This simplifies wiring \u2013 we can power all modules from one source \u2013 and ensures that every board can easily connect in series during demonstrations.</p>"},{"location":"block/#daisy-chain-header-pin-assignment","title":"Daisy Chain Header Pin Assignment","text":"<ol> <li>External Power (+9-12V)</li> <li>UART Transmit Line (TX/RX)</li> <li>UART Ready to Send (inactive)</li> <li>UART Clear to Send (inactive)</li> <li>Subsystem Specific/No Connection</li> <li>Subsystem Specific/No Connection</li> <li>Subsystem Specific/No Connection</li> <li>External Ground</li> </ol>"},{"location":"block/#overview-of-block-diagram","title":"Overview of Block Diagram","text":"<p>In the final block diagram, power from a barrel jack adapter flows into each board\u2019s regulator circuit (for example, a switching buck regulator on the HMI and Wi-Fi boards for 3.3V, and dual regulators on the Actuator board for 5V and 3.3V). The HMI Interface (Aarshon\u2019s subsystem) features an ESP32-S3 microcontroller that reads a 4\u00d74 matrix keypad for user input and drives a 0.96\u2033 OLED display for output.</p> <p>The Sensor Suite (Ian\u2019s subsystem) uses a PIC18F27Q10 8-bit microcontroller to interface with multiple environment sensors via I\u00b2C: a humidity/temperature sensor, a barometric pressure sensor, and a wind speed sensor (hall-effect based anemometer)</p> <p>The sensor board also includes two analog light sensors (photoresistors) whose signals feed into a comparator; this comparator outputs a single digital signal indicating which direction the solar panel should turn to face the brighter light</p> <p>The Actuator Subsystem (Alex\u2019s module) is built around a PIC18F47Q10 microcontroller, chosen for its ample I/O and familiarity, which controls two types of motors for the solar panel: a stepper motor for panning the panel and a DC motor for any additional motion (e.g. tilting or a demo wind turbine). The stepper motor is driven through a ULN2003 driver array, and the DC motor uses an Infineon IFX9201 SG driver over an SPI interface.</p> <p>Finally, the Internet Communication Subsystem (Kushagra\u2019s board) uses an ESP32-S3-WROOM module as well, focused on Wi-Fi connectivity. It receives data from the chain and publishes sensor readings to an MQTT server (updating a GitHub-hosted web dashboard), and can also inject commands from the web back into the chain.</p>"},{"location":"block/#process-diagram","title":"Process Diagram","text":"<p>All critical information is sent through UART and must follow the protocol below. Messages that are sent to everyone in the chain are trashed by the sender. Messages with a designated recipient are trashed by the recipient. Messages may be single commands or continuous loops.  </p> <pre><code>sequenceDiagram\n    actor u as User\n    participant a as Aarshon\n    participant i as Ian\n    participant c as Alex\n    participant k as Kushagra\n    actor w as Web\n    w--&gt;&gt;k: Alignment frequency\n    k-&gt;&gt;a: Kushagra to Alex&lt;br&gt;Shift motor 90 deg counterclockwise\n    a-&gt;&gt;i: Kushagra to Alex&lt;br&gt;Shift motor 90 deg counterclockwise\n    i-&gt;&gt;c: Kushagra to Alex&lt;br&gt;Shift motor 90 deg counterclockwise\n    c-&gt;&gt;c: Rotate base 90 degrees ccw&lt;br&gt;trash msg\n    u--&gt;&gt;a: Shift base rotation\n    a-&gt;&gt;i: Aarshon to Alex&lt;br&gt;Shift motor 10 deg clockwise\n    i-&gt;&gt;c: Aarshon to Alex&lt;br&gt;Shift motor 10 deg clockwise\n    c-&gt;&gt;c: Rotate base 10 degrees cw&lt;br&gt;trash msg\n    loop every second\n        i-&gt;&gt;c: Ian to Alex&lt;br&gt;Solar panel alignment\n        c-&gt;&gt;c: Moves solar panel&lt;br&gt;trash msg\n    end\n    c-&gt;&gt;k: Alex to Aarshon&lt;br&gt;Subsystem malfunction\n    k-&gt;&gt;a: Alex to Aarshon&lt;br&gt;Subsystem malfunction\n    a--&gt;&gt;u: Display error\n    a-&gt;&gt;a: trash msg\n    loop every 5 seconds]&lt;br&gt;[sensor broadcast\n        i-&gt;&gt;c: Ian to Everyone&lt;br&gt;Wind Speed is 10 mph\n        c-&gt;&gt;k: Ian to Everyone&lt;br&gt;Wind Speed is 10 mph\n        k--&gt;&gt;w: Wind Speed is 10 mph\n        k-&gt;&gt;a: Ian to Everyone&lt;br&gt;Wind Speed is 10 mph\n        a--&gt;&gt;u: Display data\n        a-&gt;&gt;i: Ian to Everyone&lt;br&gt;Wind Speed is 10 mph\n        i-&gt;&gt;i: trash msg\n    end</code></pre>"},{"location":"block/#top-5-software-design-changes","title":"Top 5 Software Design Changes","text":"<p>Throughout development, the team encountered several necessary pivots and improvements to the software architecture. Below is a numbered list of the five most significant changes to our software design compared to the initial project proposal, along with explanations and supporting details:</p> <ul> <li> <p>Adoption of a Unified ESP32 Platform for HMI: In the proposal, the HMI subsystem was planned around a PIC18 microcontroller with a simple text LCD. We discovered early on that using an ESP32-S3 microcontroller for the HMI would vastly improve performance and flexibility. This change meant rewriting HMI firmware (originally envisioned in C for PIC) to the ESP32 environment (MicroPython for rapid UI development) and leveraging the ESP32\u2019s built-in libraries for driving the display.  It also standardized two of our subsystems (HMI and Wi-Fi) on the same MCU family, which helped with cross-programming and debugging. This change was reflected in our UML diagrams by introducing new classes for OLED graphics handling and removing PIC-specific MCC-generated code modules.</p> </li> <li> <p>Overhaul of the Inter-Subsystem Communication Protocol: Our initial design treated the serial chain more like a daisy-chained point-to-point link without a formal protocol (e.g., we thought of simply passing raw sensor values around in a fixed order). As the project evolved, we realized this would not scale or handle errors well. We therefore designed the comprehensive message protocol described above, introducing structured packets with IDs, types, and start/stop bytes. This was a major software design change \u2013 essentially implementing a mini networking stack for our system. In software, this meant developing a parser state machine on each microcontroller to assemble bytes into messages and a message handler to act on them based on type and target. In summary, moving from an complicated communication approach to a formal UART messaging API was a foundational software improvement that impacted every subsystem\u2019s code (each got a message parser/formatter module).</p> </li> <li> <p>Simplification of Sensor Data Handling and Reduction of Scope: Initially, our software design for the sensor suite aimed to accommodate a larger variety of sensors (UV index, air quality) and possibly perform local data logging. We planned for more complex data calibration routines and even retrieval of reference data from the internet (to compare our readings with real forecasts). Midway, we decided to trim the sensor scope to four main sensors and offload any advanced analysis to the cloud if needed. This resulted in a leaner embedded software design: the Sensor MCU\u2019s code was simplified to just read the I\u00b2C sensors we have and format the data for broadcasting. Relevant message data is differentiated by utilizing the recipient ID and message type bytes. Certain message types are relevant to all subsystems. Messages that don't pertain to the subsystem are passed along down the chain. We removed tentative code for the UV and air quality sensors (which were never added to hardware) and dropped the feature where the Wi-Fi module would fetch external weather API data. This focus helped ensure we delivered a working set of features on time and made the system more robust (each sensor routine was thoroughly tested and tuned, rather than having many partially implemented ones).</p> </li> <li> <p>Integration of Analog Sun-Tracking with Digital Control Loop: Our initial concept for solar panel control was to use computed sun position or rely solely on the web input to adjust the panel, possibly with a pre-programmed schedule. During development, we pivoted to a more direct feedback mechanism using the photoresistor comparator on the sensor board to continuously guide the panel. This introduced a hybrid control approach: a hardware-driven signal combined with software logic. The result of this change is a more robust solar tracking that combines fast hardware response with coordinated software commands. It did complicate the actuator\u2019s state machine (added a state for \u201cauto-tracking mode\u201d vs \u201cmanual mode\u201d), which we reflected in a revised statechart UML diagram for the Actuator subsystem. This adjustment was a response to real-world testing feedback and made our system demonstration more impressive.</p> </li> <li> <p>Enhanced Error Handling and User Feedback Mechanisms: The original software plan did not emphasize error reporting; we assumed each subsystem would mostly operate independently and errors could be handled ad-hoc. As we integrated, we recognized the need for a unified error/status framework so that, for example, a sensor failure could be communicated to the user and logged. We thus introduced subsystem status codes and error messages into the protocol and developed a corresponding software feature in each module. Concretely, this meant each microcontroller now has an error check routine and can send a standardized message if something is wrong (for instance, sensor MCU checks if sensor read fails or goes out of range, actuator MCU checks if motor current draw is too high, etc.). On the HMI side, software was added to listen for any incoming error codes/messages and display them clearly (overriding the normal screen with an alert until acknowledged). It was a significant enhancement to the software that wasn\u2019t in the proposal but became essential after observing the system in action.</p> </li> </ul> <p>Each of these changes was documented and supported by UML diagrams or flowcharts to ensure the team had a shared understanding of the updates. The end result was a more robust, maintainable software design that could meet the project\u2019s evolving requirements and real-world testing conditions.</p> <p>API Message Structure cont.</p>"},{"location":"charts/","title":"Charts","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre>"},{"location":"ideation/","title":"Ideation & Design Generation - ideation","text":""},{"location":"ideation/#goal-of-the-exhibit","title":"Goal of the Exhibit","text":"<p>The Smart STEM Weather Station exhibit's main objective is to create an entertaining and instructive experience that encourages curiosity and an awareness of environmental science. The exhibit was created with accessibility and engagement to make difficult scientific ideas understandable to a wide range of viewers. Visitors are urged to actively investigate weather patterns and environmental elements by integrating real-time data collecting with an easy-to-use interface, transforming abstract data into concrete, significant discoveries. An LCD display, tactile buttons, and sensor demonstrations are examples of hands-on features that guarantee visitors will not only view the exhibit but also engage with it and gain knowledge from it. This adheres to the \"Suggested Guidelines for Designing Interactive Exhibits\" by emphasizing clarity, simplicity, and an active learning strategy to maintain visitor interest and enhance educational outcomes.</p>"},{"location":"ideation/#target-audience","title":"Target Audience","text":"<p>The exhibit is designed to appeal to a wide range of visitors, including those of all ages, but it focuses especially on K\u201312 pupils. Its user-friendly design will appeal to younger audiences since it incorporates visual signals like LED indicators, big buttons, and guided directions to make navigation and data interpretation easier. Deeper levels of exploration, such as comprehending how sensors gather data and identifying patterns in environmental changes, are available for older kids and adults in the exhibit. The Smart STEM Weather Station guarantees inclusivity and accessibility by accommodating a variety of learning styles and educational levels. Following the \"Suggested Guidelines for Designing Interactive Exhibits,\" the display also strongly emphasizes making an experience that is cozy, captivating, and long-lasting to draw in visitors, pique their interest, and enable them to learn in a meaningful way.</p>"},{"location":"ideation/#concept-design-generation","title":"Concept &amp; Design Generation","text":""},{"location":"ideation/#ideation","title":"Ideation","text":"<p>We met together to discuss possible ideas and design criteria. Every idea was accepted to broaden our options. Each idea was given its own note and was place on the below board. Design Brainstorming: At the project\u2019s outset, the team engaged in extensive brainstorming to generate a wide range of exhibit ideas and features. All ideas were recorded on notes and grouped by themes such as potential exhibit concepts, critical features, and \u201cnice-to-have\u201d additions</p> <p></p> <p>We considered various STEM demonstration concepts before converging on a weather station with a solar energy component. Key criteria that guided our concept selection were educational value, interactivity, feasibility, and coherence with the STEM theme. By sorting and combining subgroups of ideas, we arrived at the integrated concept of the Smart Weather Station \u2013 a hybrid exhibit showcasing both environmental sensing and renewable energy harvesting.This concept merged our strongest ideas: real-time weather data display, a solar panel that reacts to environmental conditions, and internet connectivity for broader engagement.</p>"},{"location":"ideation/#sorting-grouping-ideas","title":"Sorting &amp; Grouping Ideas","text":"<p>These ideas were then organized into three main categories. The first catagory, depicted in green, is all of the various exhibit ideas that we produced. The magenta notes are critical features or criteria that need to be achieved. The other features shown in blue are not necessary to the final exhibit but could be interesting additions if possible. These groups were then further organized by similarity into columns. We then combined various subgroups to arrive at our concept.  </p>"},{"location":"ideation/#our-concept","title":"Our Concept","text":""},{"location":"ideation/#concept-description","title":"Concept Description","text":"<p>The Smart STEM Weather Station is designed to captivate and educate museum visitors by providing real-time environmental data through an interactive interface. This design prioritizes accessibility and engagement, addressing visitor needs with features that make learning both hands-on and straightforward. For example, the station's LCD screen and physical buttons create an easy-to-navigate system suitable for all ages. Additional features like color-coded LED indicators and user-friendly alerts simplify the interpretation of complex data. The station will also include instructional elements such as on-screen prompts, and demonstrations illustrating how the sensors work to collect data.</p>"},{"location":"ideation/#planned-workflow","title":"Planned Workflow","text":"<p>The functionality of the weather station is divided among four team members, each contributing to an individual subsystem. One teammate will handle internet-based two-way communication using the ESP32 microcontroller, enabling data retrieval and updates from an API that stores local weather data. Another will design the human-machine interface (HMI), developing the interactive LCD display and control buttons for navigating the data and controlling the system. The third teammate will focus on the sensor subsystem, integrating temperature, humidity, ultraviolet, air pressure, air quality, and wind speed sensors to collect real-time environmental data for the purposes of demonstration. The fourth member will manage the actuator-based response, implementing a solar array that tracks sunlight using the acquired weather data.</p> <p>To ensure ease of use, the weather station uses visual cues, such as LED status indicators, and a simplified graphical interface on a 16x2 LCD screen. Guided by the \"Suggested Guidelines for Designing Interactive Exhibits,\" the controls are ergonomically designed with large, easy-to-use buttons and an interface that avoids complexity. Durability, safety, and comfort are central to the design\u2014each subsystem is weatherproofed, with sturdy enclosures to withstand environmental challenges like rain, wind, and mild debris. Safety features include automatic shutoff and several fuses to prevent overheating and protect against power surges.</p>"},{"location":"ideation/#final-concept-selection","title":"Final Concept Selection:","text":"<p>Final Concept : The chosen concept emphasizes an interactive weather station that not only measures weather parameters but also dynamically responds (via the solar panel tracker). We selected this design because it met multiple goals: it engages users with live data, includes a visually interesting movement (the panel tracking the \u201csun\u201d), and teaches multiple STEM topics in one exhibit. The final decision was reached by consensus after evaluating which idea best satisfied our mission statement and the project requirements. We found that the weather station concept could incorporate most of the team\u2019s ideas (sensors, displays, moving parts, connectivity) in a cohesive way, rather than building separate exhibits for each idea.</p> <p>Evolution from Initial Ideas: There were a few deviations between our early concept and the final implementation. Initially, the concept description imagined features like an LCD screen with big buttons, LED indicators, and possibly additional sensors (e.g., ultraviolet index, air quality) for comprehensive coverage.</p> <p>In practice, we refined the scope to ensure reliability and clarity. For example, we replaced the simple 16\u00d72 text LCD with a higher-resolution 128\u00d764 OLED display for a more versatile and engaging interface (allowing graphics and better readability)</p> <p>Some envisioned sensors (such as UV and air quality) were not included in the final build due to time and budget constraints; instead we focused on core sensors (temperature, humidity, pressure, wind) that provide plenty of learning opportunities.</p> <p>The idea of retrieving local weather data from an online API for comparison was discussed early on, but the final design prioritized live data from our own sensors to keep the experience authentic and self-contained. Additionally, our approach to solar tracking shifted from possibly using external data or complex logic to a simpler, robust method: two photoresistors and a hardware comparator now determine the sun\u2019s direction, which directly drives the panel alignment mechanism. </p> <p>These adjustments ensured that the final implementation remained achievable and dependable while still fulfilling the spirit of our original concept. In summary, the ideation process yielded a strong concept which we honed to balance ambition with practicality, resulting in a successful final design.</p>"},{"location":"ideation/#concept-presentation","title":"Concept Presentation","text":""},{"location":"poster/","title":"Showcase Poster","text":""},{"location":"poster/#innovation-showcase-poster-click-here-to-download","title":"Innovation Showcase Poster (Click Here to Download!)","text":""},{"location":"poster/#poster","title":"Poster","text":"<p>(Poster: It includes an overview of the project\u2019s objectives, design, results, and a QR code link to our live dashboard. A full-resolution image (.jpg) of the poster will be embedded for viewing, and a downloadable PDF version will be available for detailed reading or printing.)</p>"},{"location":"reflection/","title":"Reflection","text":"<p>After completing the MacroChip STEM Weather Station project, our team reflected on the experience to capture lessons learned and to suggest improvements for future endeavors. Below, we document our top takeaways, advice for future student teams, and a vision for a Version 2.0 of the project.</p>"},{"location":"reflection/#lessons-learned-top-10","title":"Lessons Learned (Top 10)","text":"<ol> <li> <p>Start Integration Early: We learned the importance of integrating subsystems sooner rather than later. Early in the project, we worked on our modules in isolation, but when we first connected them, we encountered unexpected issues (message timing, power draw conflicts, etc.). Integrating early allowed us to discover and resolve interface problems well before the final deadline, making the last weeks much smoother.</p> </li> <li> <p>Effective Team Communication is Crucial: Regular team meetings and clear communication channels were vital. Whenever we faced a bug that spanned hardware and software (e.g., a sensor not updating the display), having all members discuss it together often led to the solution faster. We made sure to keep each other updated on changes \u2013 for example, if the Wi-Fi protocol changed, Ian and Aarshon adjusted their code accordingly. This project reinforced how essential teamwork and communication are in engineering.</p> </li> <li> <p>Use Robust Communication Protocols: We initially underestimated the complexity of sending data between microcontrollers. By implementing a structured protocol with start/stop bytes and IDs, we greatly improved reliability. The lesson is to treat inter-device communication with the same care as internet communication \u2013 define a clear protocol and handle errors. Our experience showed that even a simple checksum or sentinel approach can save hours of debugging random byte glitches.</p> </li> <li> <p>Power Management Must Be Designed Carefully: We encountered issues with power supply, such as the OLED display causing current surges that nearly tripped our polyfuse. This taught us to pay close attention to power budgets and component inrush currents. We learned to add decoupling capacitors and consider soft-start regulators. Ensuring each subsystem had a stable power source with some margin was key to overall system stability.</p> </li> <li> <p>Importance of Modular Coding: Given each member wrote code for a different MCU, we learned to write modular, well-documented code so others could understand it. Using state machines for each subsystem (sensor sampling loop, display menu loop, motor state, etc.) made our firmware more understandable and debuggable. When issues arose, having clearly separated functions (e.g., one for parsing messages, one for acting on data) meant we could pinpoint where things went wrong. This modular approach also made it easier to accommodate late changes (like adding error handling) without breaking everything.</p> </li> <li> <p>Hardware and Software Co-Design: We discovered the value of co-design \u2013 decisions in hardware affected software and vice versa. For instance, adding the comparator hardware for sun-tracking simplified our software logic. Conversely, realizing in software that we didn\u2019t need certain signals allowed us to simplify the PCB (we left RTS/CTS unused). The lesson is that hardware and software development should inform each other; a change in one domain can often improve the other if considered holistically.</p> </li> <li> <p>User-Centric Design Improves the Project: Throughout development, we tried to put ourselves in the shoes of a museum visitor or a student. This led to some changes, like implementing an error message on the screen instead of just an LED, and making the keypad menu scroll in a loop rather than stop at ends. By focusing on the user experience, we created a more polished and effective educational tool. We learned that sometimes it\u2019s worth the extra effort to add those user-friendly touches (like clear on-screen instructions), as they make a big difference in how the project is received.</p> </li> <li> <p>Testing in Realistic Conditions: We learned to test our system in conditions similar to the showcase environment. For example, we tried the system in a brightly lit room to see if the photoresistors still worked (they did, but we had to adjust thresholds). We also simulated Wi-Fi outages to see how the system behaves (and indeed added a reconnect routine as a result). This taught us that lab testing is not enough; you should test as close to real use-case as possible, which will reveal issues you didn\u2019t anticipate (like someone power cycling the system or disconnecting a cable mid-run).</p> </li> <li> <p>Documentation and Version Control: Keeping good documentation (both in code comments and in our shared documents) was invaluable. There were moments we had to backtrack or recall why we made a certain decision; having written rationale saved time. We also used version control (GitHub) extensively \u2013 each member had a branch for their code, and we merged carefully. This not only prevented losses but also allowed us to integrate code changes systematically. The lesson is: document as you go and use version control for any multi-person software project, no matter how small.</p> </li> <li> <p>Be Adaptable and Embrace Changes: Finally, perhaps the biggest lesson is that projects evolve \u2013 and that\u2019s okay. Our original plan changed quite a bit by the end (components swapped, features added/dropped), but by embracing those changes and staying agile, we ended up with a better result. We learned not to be too fixated on the initial design if improvements or simplifications present themselves. In engineering, being flexible and solution-focused yields a stronger final product.</p> </li> </ol>"},{"location":"reflection/#recommendations-for-future-students-top-5","title":"Recommendations for Future Students (Top 5)","text":"<ol> <li> <p>Start Early and Plan for Integration: Begin working on how your subsystems will interface as soon as possible. Even if each teammate has distinct tasks, define early on how things will connect (both physically and through code). Don\u2019t wait until the end to assemble the project \u2013 integrate incrementally. For future student teams, a good practice is to have an integration milestone midway through the schedule. This way, you can iron out major issues with plenty of time to spare.</p> </li> <li> <p>Communicate Regularly and Document Decisions: Keep the communication lines open within your team. Hold brief weekly (or even twice-weekly) sync-ups to share progress and blockers. When decisions are made (like choosing a protocol or altering a design), document them in a shared log or team notebook. This avoids confusion later and ensures everyone is on the same page. Consistent communication prevents many small issues from snowballing into big ones.</p> </li> <li> <p>Test Each Module Thoroughly (and then Test Again as a System): We recommend future students thoroughly test their individual components with test code/hardware before integration. Once each piece works in isolation, test them together. Create a checklist of \u201ctests\u201d \u2013 e.g., for us: does the sensor board send correct data values? Does the motor move the right degrees on command? \u2013 and verify all. Moreover, test under conditions that mimic the final demo (long durations, different environments, user input patterns). This systematic testing approach will help catch bugs early and increase confidence in your system during the actual presentation.</p> </li> <li> <p>Prioritize Simplicity and Reliability over Scope Creep: It\u2019s tempting to keep adding features or sensors, but more is not always better. Future teams should focus on executing the core requirements exceptionally well, rather than implementing too many features poorly. Simplicity in design often leads to better reliability. Get the foundation working (for us, a solid data-collection-and-display loop), then add extras if time permits. A stable, simpler project will impress more than a complicated one that\u2019s flaky. Remember that every new feature adds integration overhead and potential points of failure.</p> </li> <li> <p>Make it Engaging and User-Friendly: Don\u2019t forget the end-user experience, especially for educational or demo-oriented projects. Future students should spend time on the usability and presentation of their project. This includes clear labeling, instructions for interaction, and aesthetic touches. A user-friendly project with a clear purpose will stand out. For instance, having a clean UI, or a demo script that visitors can follow, makes a big difference. In short, build something that not only works, but that people can intuitively figure out and enjoy interacting with \u2013 this often means simplifying controls and providing feedback (lights, sounds, messages) to guide the user.</p> </li> </ol>"},{"location":"reflection/#version-20","title":"Version 2.0","text":"<ol> <li> <p>Hardware Upgrades for Reliability and Safety One of the first improvements would be to redesign the power distribution for greater robustness. In V1.0, we noticed the OLED\u2019s power surge and Wi-Fi transmission spikes could trip our resettable fuse at times. For V2.0, we plan to refine the power input stage: use a dedicated, higher-capacity 5V regulator feeding all boards (or individual regulators per board from a 12V supply) and add a low-dropout regulator specifically for noise-sensitive components like the OLED. Collectively, these changes make the station more \u201cbulletproof\u201d in classroom or museum settings, where it might be turned on/off frequently or subject to unmonitored use.</p> </li> <li> <p>Expanded Sensor Suite and Environmental Interaction To enhance the educational value, Version 2.0 would reincorporate some sensors we initially scoped out and add new ones for a more comprehensive weather profile. We plan to add a UV Index sensor and an air quality (VOC/CO2) sensor as originally envisioned, so students can learn about sunlight intensity and pollution as well. A rain detector could be a fun addition \u2013 for instance, a simple moisture sensor or even a small rain gauge to measure rainfall. These new sensors would connect via I\u00b2C or analog inputs on the Sensor board (which in V1 hardware still has some IO pins free, or we can upgrade to a slightly larger PIC if needed for more ADC channels).</p> </li> <li> <p>Improved HMI and User Interaction In Version 2, we envision a more sophisticated and user-friendly HMI. One improvement is to move from the current push-button keypad to a capacitive touch interface or touchscreen. For example, a small touchscreen LCD could replace the OLED + keypad combination, providing an integrated display and input device. This could show richer graphical data (like trends, mini-graphs of sensor readings over time) and allow intuitive interactions like swiping to change screens. While this adds cost, it aligns with modern museum exhibits and would intrigue students who are used to tablets. If a touchscreen is not feasible, even adding a few capacitive touch pads or a joystick for navigation can modernize the interface. We also noted interest from users about auditory feedback \u2013 so adding a small buzzer or speaker to provide alerts (e.g., a fun sound when a new reading comes in or an alarm if a threshold is exceeded) can increase engagement.</p> </li> <li> <p>Streamlined Communication &amp; Data Logging While our current communication protocol works, Version 2.0 could explore more advanced options. One idea is to implement a proper bus protocol such as CAN bus or a multi-drop UART (with RS-485 transceivers) if we needed longer cable runs or more reliability in noisy environments. However, keeping backward compatibility with our existing structure is also a priority. We might thus keep the same logical protocol but improve the physical layer (for instance, using differential signaling for robustness). Additionally, adding a simple acknowledgment mechanism could be beneficial \u2013 e.g., critical commands could be acknowledged by the receiver to confirm execution, increasing reliability.</p> </li> <li> <p>Mechanical and Enclosure Enhancements Lastly, a Version 2.0 would feature improved mechanical design for the overall station. We would create a professional enclosure or case for the electronics, possibly 3D-printed or laser-cut acrylic, to make the setup look like a single product rather than a collection of boards and wires. Each sensor could be embedded in a realistic weather station form factor (e.g., an anemometer cup for wind speed, a Stevenson screen for temperature/humidity sensor). The solar panel would be mounted on a sturdier frame with the two-axis motion, and all wires would be hidden for safety and aesthetics. If this were to be installed long-term, the enclosure should be weatherproof (especially if demonstrating outdoors). So, sealed boxes, cable glands, and maybe conformal coating on PCBs would be used.</p> </li> </ol> <p>We\u2019d also consider scalability: making it easy to add another module to the chain. For instance, maybe a future \u201crain gauge module\u201d could be plugged in. So we might standardize the connectors and ensure the protocol can address an additional node. The physical layout of the boards could be adjusted to be stackable or mount on a single backplane, depending on what\u2019s more robust.</p>"},{"location":"reflection/#conclusion","title":"Conclusion","text":"<p>In conclusion, Version 2.0 of the MacroChip STEM Weather Station will focus on robustness, expandability, and enhanced learning features. By improving power regulation, adding more sensor capabilities, refining the user interface, and strengthening the build, we aim to create a device that can live in a classroom or museum for years \u2013 sparking curiosity and demonstrating engineering concepts reliably day after day. These planned upgrades build on the solid foundation of our current project and address both the \u201cwish-list\u201d items we identified (like the buzzer and spare I/O), and the feedback from our users and mentors. With Version 2.0, the Smart Weather Station would not only show weather data but do so in a way that\u2019s more immersive, informative, and indestructible, truly becoming a product-grade teaching asset</p>"},{"location":"report/","title":"Team Charter - charter","text":""},{"location":"report/#team-statements","title":"Team Statements","text":"<p>Charter Statement:  Our mission is to design and deliver innovative, sustainable, and modular embedded systems that address educational and STEM-based challenges. This semester, we aim to develop an interactive, web-enabled physical device demonstrating a scientific or engineering concept. The project will prioritize modularity, standards compliance, and user engagement to support K-12 students' interest in STEM fields. Success will be measured by the device's interactivity, educational impact, technical robustness, and adherence to modular design principles.</p> <p>Mission Statement:  Our goal is to develop an interactive, STEM-themed educational display within four months that engages K-12 students by showcasing a scientific or engineering concept in a fun and Intuitive way. The product will emphasize energy efficiency, modularity, and user-friendly design, ensuring both technical excellence and alignment with educational standards. We aim to deliver a sustainable, impactful solution that inspires young learners to explore science, technology, engineering, and mathematics while fostering our team's growth in professional engineering practices.</p>"},{"location":"report/#team-goals","title":"Team Goals","text":"<ol> <li> <p>Develop a Polished, Market-Ready Product Create an innovative, STEM-themed, interactive device that's not only functional but also visually impressive and ready for real-world use. The goal is to deliver a high-quality product that investors and end-users alike will recognize as impactful and valuable.</p> </li> <li> <p>Emphasize Professional Collaboration Operate as a professional team by leveraging everyone's expertise, maintaining clear communication, and working efficiently to meet deadlines. Showcase our ability to collaborate on a complex project and deliver results as a cohesive unit.</p> </li> <li> <p>Prioritize Standards and Scalability Build the product with scalability in mind by adhering to industry standards and modular design principles. This ensures the device is easy to maintain, upgrade, and adapt for broader markets, making it appealing for future development and commercialization.</p> </li> <li> <p>Showcase Advanced Technical Skills Demonstrate our technical expertise in robotics, embedded systems, and software engineering through a well-executed, innovative project. Highlight cutting-edge solutions to real-world challenges, proving we're ready for the next step in our careers.</p> </li> <li> <p>Focus on End-User Impact Deliver a product that's intuitive, engaging, and tailored to the needs of the target audience\u2014K-12 students and educators. Make it a standout experience that inspires excitement for STEM while solving specific user pain points.</p> </li> <li> <p>Highlight Sustainability and Innovation Incorporate energy-efficient designs, sustainable materials, and forward-thinking features that make the product not only innovative but also environmentally responsible. Investors want to see a future-focused mindset.</p> </li> <li> <p>Deliver On Time and On Budget Meet all milestones, stay within budget, and present a fully functional prototype or final product. Show investors that we're capable of managing resources effectively and delivering a tangible result within a defined time frame.</p> </li> </ol>"},{"location":"report/#communication-channels","title":"Communication Channels","text":"Name 1st Choice 2nd Choice 3rd Choice Aarshon George Text Discord Email Alex Comeaux Text Discord Email Ian Anderson Text Discord Email Kushagra Dashora Text Discord Slack <p>Our team will primarily use an iMessage group to facilitate team communication. This allows for immediate and direct communication between all group members at once for important notices and discussions.</p> <p>If team members are unresponsive for excessive times during meetings, the team member may be called for additional reminders.</p>"},{"location":"report/#meeting-schedule","title":"Meeting Schedule","text":"Time Sunday Monday Tuesday Wednesday Thursday Friday Saturday 09:00 C I K I 10:00 A I K C I K A I 11:00 A I K C I K A I 12:00 A I K C I K A I 13:00 A I K I K I 14:00 A I K I I A K I 15:00 A I K I I I I A K I 16:00 A I K I I A C I I A K I 17:00 A I K C I I A C I A C I A C K C I 18:00 A I K C I I A C I A C I A C K C I 19:00 A I K C I I A C I A C I A C K A I 20:00 A I K I I A C I A C I A C K A I 21:00 A I K A C A C A C K A I Name Initial Email Phone Aarshon George A anolas97@asu.edu (480)876-1337 Alex Comeaux C amcomeau@asu.edu (602)527-7786 Ian Anderson I inanders@asu.edu (808)824-1519 Kushagra Dashora K kdashora@asu.edu (602)632-1229 <p>Communication Methods:</p> <ol> <li>Text</li> <li>Discord</li> <li>Email</li> </ol>"},{"location":"report/#meeting-coordination","title":"Meeting Coordination","text":"<p>Meetings will typically be held during Wednesday and Thursday afternoons, preferably in person and with all members present. If circumstances do not allow for a normal meeting time, a more suitable meeting time should be discussed and agreed upon. Meeting schedule will be kept in Google Calendar for reminders. For more spontaneous meetings, members may not be required to attend if personal reasons arise.</p>"},{"location":"report/#roles-responsibilities","title":"Roles &amp; Responsibilities","text":"Name Role Duties Kushagra Dashora Meeting Leader Schedules team meetings, creates and distributes an agenda for each meeting Alex Comeaux Meeting Recorder Takes minutes of each team meeting, including attendance, and records action items and to whom they are assigned Aarshon George Assignment Leader Coordinates the team's work on a given assignment to Canvas before the due date Ian Anderson Project Monitor Tracks the team's progress relative to the project schedule (Gantt Chart) and keeps team members apprised of deadlines and project status <p>Assigned roles are subject to change at any time</p>"},{"location":"report/#team-coordination-accountability","title":"Team Coordination &amp; Accountability","text":"<p>Each team member will volunteer for a role by articulating their qualifications and reasons for suitability. If two members express interest in the same role, they will engage in discussion and reach a compromise. We plan to rotate roles at least three times\u2014or as needed\u2014to ensure we maximize each individual's growth and learning opportunities. Roles are assigned based on each person's qualifications and skills, with regular check-ins to confirm that no one finds their responsibilities overwhelming. Technical tasks will be distributed in alignment with each member's strongest areas of confidence and expertise.</p> <p>To ensure all contributions are properly credited, each member will sign their name at the beginning of every assignment, just as they would for a standard homework task. Additionally, each change made to the team website is recorded through github, creating a clear record of individual responsibilities. This method allows us to see if anyone is under-performing and prompts that individual to seek help or clarification as needed. As long as everyone completes their assigned tasks, there should be no hesitation in requesting or offering assistance. Otherwise, if a team member repeatedly fails to complete the tasks assigned to them, the team will be forced to hold this team member accountable.</p>"},{"location":"report/#defined-roles-and-responsibilities","title":"Defined Roles and Responsibilities","text":"<p>Aarshon: Team lead and systems integrator, overseeing overall progress and ensuring the components come together seamlessly. Alex: Hardware specialist, responsible for designing, testing, and optimizing the physical and electronic components of the project. Ian: Software developer, handling coding, web integration, and system control logic for the interactive aspects. Kushagra: User experience designer and tester, focusing on user-centered design, interface development, and end-user feedback. Regular Team Check-Ins Weekly meetings led by Aarshon to discuss progress, address roadblocks, and review upcoming tasks. Each member provides a brief update on their responsibilities.</p> <p>Transparent Communication Use Slack for daily updates, Trello for task management, and Google Drive for shared documentation. This ensures everyone has access to key information and can collaborate effectively.</p> <p>Milestone Tracking The project will be broken into phases:</p> <p>Phase 1: Concept development (All team members) Phase 2: Hardware prototyping (Alex &amp; Aarshon) Phase 3: Software integration (Ian) Phase 4: User testing and refinement (Kushagra &amp; Alex) Peer Accountability Each team member is responsible for updating the group on their progress during meetings and flagging potential delays. If someone is falling behind, others will provide support.</p> <p>Conflict Resolution If a disagreement arises, Alex will act as a mediator to ensure the team remains focused on the project goals. Decisions will prioritize the project's success and deadlines.</p> <p>Feedback Loops Weekly peer reviews will allow team members to provide constructive feedback on each other's work. This ensures everyone stays aligned and that the final product meets high standards.</p> <p>Leadership and Decision-Making Aarshon will make executive decisions if consensus isn't reached. However, all decisions will be informed by group discussions to ensure fairness and inclusivity.</p> <p>Commitment to Deadlines Each milestone will have a hard deadline, tracked on Trello. Missed deadlines will require immediate discussion and a revised plan to stay on schedule.</p>"},{"location":"report/#conflict-recognition-resolution","title":"Conflict Recognition &amp; Resolution","text":"<p>Our team understands that disagreements will happen in group environments. As such, members are expected to be able to handle conflicts in a mature and civil way. Additional meetings may be arranged upon failure to complete responsibilities, and repeated behavior will be escalated to professors.</p> <p>If someone disagrees or there's tension, we'll address it right away instead of letting it simmer. Ignoring conflicts only makes them worse. We'll sit down, lay everything out on the table, and figure out where the disagreement is coming from.</p> <p>We get it\u2014everyone has different ideas, especially when you've got creative, motivated people working together. Disagreeing means we care about the project and want it to be great. The key is keeping it respectful and focusing on the idea, not the person.</p> <p>We'll make sure everyone knows what they're responsible for from the start. If someone's juggling too many tasks or stepping into other people's lanes, we'll talk it out and adjust things. It's all about balance and making sure no one feels overloaded or overlooked.</p> <p>If something goes wrong, we'll deal with it together: Step 1: Talk it out. Let everyone explain their side and listen. Step 2: Brainstorm solutions as a group. No bad ideas\u2014just throw them out there and see what works. Step 3: Agree on a plan, and make sure everyone's on board.</p> <p>When to Ask for Help If we're totally stuck, or the disagreement is starting to slow us down, we won't hesitate to bring it to the instructor. This is a last resort, but if it gets to that point, we'll explain the issue and ask for guidance to get us back on track. Keep It Chill and Professional</p> <p>At the end of the day, we're all here for the same reason: to deliver a great project and grow as engineers. We'll handle conflicts in a way that's respectful, keeps the vibe positive, and moves us forward as a team.</p>"},{"location":"resources/","title":"Resources","text":"<p>The Resources section provides access to the project\u2019s supporting materials and documentation for anyone who wants to delve deeper or replicate aspects of our design. Below is a summary of what is available:</p>"},{"location":"resources/#1-hardware-design-files","title":"1. Hardware Design Files:","text":"<p>All PCB schematics and layout files (in KiCad format) for each subsystem board are provided. This includes the board for the HMI (keypad + OLED + ESP32), the Sensor suite board (with PIC MCU and sensor breakouts), the Actuator motor driver board (PIC MCU, motor drivers, regulators), and the Wi-Fi board (ESP32 module and regulator). These files allow others to examine our circuit design or even fabricate the boards. We also include 3D CAD models (in STEP format) of the mechanical assembly \u2013 showing how the solar panel is mounted and how the enclosures for sensors and electronics were arranged.</p> <p>Download Hardware Files: - \ud83d\udd17 Internet Communication Subsystem PCB &amp; Schematic (Kushagra) - \ud83d\udd17 Sensor Suite Hardware Files (Ian) - \ud83d\udd17 HMI PCB and OLED Mount (Aarshon) - \ud83d\udd17 Actuator Driver Board Design (Alex) - \ud83d\udd17 3D Printed Mechanical Assembly (STEP Models)</p>"},{"location":"resources/#2-firmware-source-code","title":"2. Firmware Source Code:","text":"<p>The complete source code for each microcontroller is available for download. This includes MPLAB X projects in C for the PIC18F27Q10 and PIC18F47Q10 subsystems, as well as the ESP32 code. The ESP32 code (for both HMI and Wi-Fi units) is written in MicroPython and organized into modules for sensor parsing, MQTT communication, and display updates. We provide a .zip file containing the Wi-Fi subsystem\u2019s ESP32 firmware (for MQTT publishing), and similarly packaged code for the HMI ESP32 and PIC firmware hex files. Instructions are included for how to flash the code onto the respective devices, so that others can reproduce our setup. </p> <p>Download Individual Firmware Projects: - \ud83d\udd17 Kushagra Dashora \u2013 Internet Communication - \ud83d\udd17 Ian \u2013 Sensor Suite - \ud83d\udd17 Aarshon \u2013 Human Machine Interface - \ud83d\udd17 Alex \u2013 Actuator System</p>"},{"location":"resources/#3-demo-video","title":"3. Demo Video:","text":"<p>We have included a short video clip demonstrating the weather station in action. In the video, a user cycles through different data views on the HMI screen, and the solar panel automatically adjusts as a flashlight is moved around it (simulating the sun). This video is meant to provide a quick overview for those who couldn\u2019t see the project in person. It\u2019s linked via YouTube for easy streaming. </p> <p>** attach all of them here with labels **</p>"},{"location":"resources/#4-project-report-and-diagrams","title":"4. Project Report and Diagrams:","text":"<p>In addition to the content on this site, we offer a compiled PDF report containing our entire documentation (proposal, design report, and final paper). All important diagrams \u2013 such as the system block diagram, process flow (sequence diagram), and message structure table \u2013 are included in the report. This is useful for educators or students who want to study the project offline. We also include our team\u2019s presentation slides used in our final presentation, which concisely summarize the project\u2019s results and lessons. </p> <p>** attach all of them here with labels **</p>"},{"location":"resources/#5-innovation-showcase-highlights","title":"5. Innovation Showcase Highlights","text":"<p>To celebrate the end of our semester-long work, here are some photos from the Innovation Showcase event, where we demoed our live system to industry professionals, faculty, and fellow students.</p> Working Subsystem Team at Showcase <p>By making these resources available, we hope to encourage further learning and possibly inspire future projects. Whether it\u2019s reusing our code for an IoT dashboard or examining our circuit for the solar tracker, these files are there to help others build upon what we learned.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"},{"location":"subfolder/","title":"This is the index to a subfolder","text":"<p>Things to discuss</p>"},{"location":"subfolder/another-subfile/","title":"This is a secondary sub page","text":"<p>Things to discuss</p>"}]}